input {
    s3 {
        bucket => "metroleads-prod-alb-logs"
        region => "us-east-1"
        prefix => "AWSLogs/682115170512/elasticloadbalancing/us-east-1/disabled/xxx"
        type   => "prod-alb"
    }
}

filter {
    if [type] == "prod-alb" {
        grok {
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:alb_name} %{IP:alb_client_ip}:%{INT:alb_client_port:int} (?:%{IP:alb_backend_ip}:%{NUMBER:alb_backend_port:int}|-) %{NUMBER:alb_request_processing_time:float} %{NUMBER:alb_backend_processing_time:float} %{NUMBER:alb_response_processing_time:float} (?:%{INT:alb_status_code:int}|-) (?:%{INT:alb_backend_status_code:int}|-) %{INT:alb_received_bytes:int} %{INT:alb_sent_bytes:int} \"(?:%{GREEDYDATA:alb_request}|-)\" \"(?:%{GREEDYDATA:alb_userAgent}|-)\" %{NOTSPACE:alb_sslcipher} %{NOTSPACE:alb_sslprotocol}"]
            match => ["message", "%{GREEDYDATA:alb_event_name} for ELB: %{NOTSPACE:alb_name} at %{TIMESTAMP_ISO8601:timestamp}"]
        }

        date {
            match => ["timestamp", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "ISO8601"]
            target => "@timestamp"
            locale => "en"
        }

        if [alb_request] =~ /.+/ {
            grok {
                match => ["alb_request", "(?:%{WORD:alb_http_method}) (?:%{DATA:alb_http_path})? (?:%{DATA:alb_http_type}/%{NUMBER:alb_http_version:float})?|%{GREEDYDATA:rawrequest}"]
            }
        }

        if [alb_http_path] =~ /.+/ {
            grok {
                break_on_match => false
                match => [
                    "alb_http_path", "(?:%{WORD:alb_http_path_protocol}://)?(%{NOTSPACE:alb_http_path_site}:)?(?:%{NUMBER:alb_http_path_port:int})?(?:%{GREEDYDATA:alb_http_path_url})?",
                    "alb_http_path", "/companies/%{UUID:company_id}",
                    "alb_http_path", "/users/%{UUID:user_id}"
                ]
            }
        }
    }
}
