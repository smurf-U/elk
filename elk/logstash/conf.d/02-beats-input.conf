input {
    beats {
        port => 5044
    }
}

filter {
    if "beats_input_codec_plain_applied" in [tags] {
        mutate {
            remove_tag => ["beats_input_codec_plain_applied"]
        }
    }

    if ("grokked" not in [tags]) {
        grok {
            named_captures_only => true
            patterns_dir => ["/etc/logstash/patterns"]
            match => {
                "message" => [
                    '^\[%{TIMESTAMP_ISO8601:timestamp}\] - %{DJANGO_LOGLEVEL:level} - \(%{FILENAME:filename}:%{METHODNAME:methodname}:%{LINENUMBER:linenumber}\): +%{GREEDYDATA:logline}',
                    '^\[%{TIMESTAMP_ISO8601:timestamp}\] \[%{LOGLEVEL:level}\] +%{GREEDYDATA:logline}'
                ]
            }
            add_tag => [ "webapp", "grokked" ]
            remove_tag => [ "_grokparsefailure" ]
        }
    }

    if ("webapp" in [tags]) {
        grok {
            named_captures_only => true
            patterns_dir => ["/etc/logstash/patterns"]
            match => {
                "message" => [
                    'companies/%{UUID:companyid}',
                    'Company id %{UUID:companyid}',
                    'company id %{UUID:companyid}',
                    'company_id %{UUID:companyid}',
                    'company %{UUID:companyid}',
                    'Company %{UUID:companyid}'
                ]
            }
        }
        grok {
            named_captures_only => true
            patterns_dir => ["/etc/logstash/patterns"]
            match => {
                "message" => [
                    'users/%{UUID:userid}',
                    'user id %{UUID:userid}',
                    'User id %{UUID:userid}',
                    'user_id %{UUID:userid}',
                    'user %{UUID:userid}',
                    'User %{UUID:userid}'
                ]
            }
        }
        grok {
            named_captures_only => true
            patterns_dir => ["/etc/logstash/patterns"]
            match => {
                "message" => [
                    'leads/%{UUID:leadid}',
                    'Lead id {UUID:leadid}',
                    'lead id {UUID:leadid}',
                    'lead_id {UUID:leadid}',
                    'lead {UUID:leadid}',
                    'Lead {UUID:leadid}'
                ]
            }
        }
        mutate { remove_tag => [ "_grokparsefailure" ] }
    }

    if ("grokked" not in [tags]) {
        grok {
            named_captures_only => true
            patterns_dir => ["/etc/logstash/patterns"]
            match => {
                "message" => [
                    '^%{GREEDYDATA:proxy_protocol_addr} - %{IPORHOST:remote_addr} - %{GREEDYDATA:remote_user} \[%{HTTPDATE:time_local}\] %{IPORHOST:host} \(%{IPORHOST:server_name}\) \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{INT:status} %{NUMBER:bytes_sent} \"%{GREEDYDATA:http_referer}\" \"%{GREEDYDATA:http_user_agent}\" %{NUMBER:request_time:float} %{NUMBER:upstream_response_time:float} %{NOTSPACE:pipe}'
                ]
            }
            add_tag => [ "nginx", "nginx_%{remote_user}", "grokked" ]
            remove_tag => [ "_grokparsefailure" ]
        }
    }

    if ("nginx" in [tags]) {
        grok {
            named_captures_only => true
            patterns_dir => ["/etc/logstash/patterns"]
            match => {
                "message" => [ 'companies/%{UUID:companyid}' ]
            }
        }
        grok {
            named_captures_only => true
            patterns_dir => ["/etc/logstash/patterns"]
            match => {
                "message" => [ 'users/%{UUID:userid}' ]
            }
        }
        grok {
            named_captures_only => true
            patterns_dir => ["/etc/logstash/patterns"]
            match => {
                "message" => [ 'leads/%{UUID:leadid}' ]
            }
        }
        mutate { remove_tag => [ "_grokparsefailure" ] }
    }

    if ("grokked" not in [tags]) {
        grok {
            named_captures_only => true
            patterns_dir => ["/etc/logstash/patterns"]
            match => {
                "message" => [
                    '^%{UUID:call_uuid}.%{TIMESTAMP_ISO8601:timestamp}.\[%{LOGLEVEL:loglevel}\].%{FILENAME:filename}\:%{LINENUMBER:linenumber}.%{GREEDYDATA:logline}',
                    '^%{TIMESTAMP_ISO8601:timestamp}.\[%{LOGLEVEL:loglevel}\].%{FILENAME:filename}\:%{LINENUMBER:linenumber}.%{GREEDYDATA:logline}'
                ]
            }
            add_tag => [ "freeswitch", "grokked" ]
            remove_tag => [ "_grokparsefailure" ]
        }
    }
}
